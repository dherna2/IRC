CS494                                                   David Hernandez
Internet Draft                                                      PSU
Intended status:  IRC Class Project                    December 7, 2017
Expires: January 2018



                             IRC Class Project
                        draft-irc-pdx-cs494-00.txt


Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79. This document may not be modified,
   and derivative works of it may not be created, except to publish it
   as an RFC and to translate it into languages other than English.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008. The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html

   This Internet-Draft will expire on June 7, 2009.




Hernandez              Expires January 7, 2018                 [Page 1]

Internet-Draft              <IRC Project>                 December 2017


Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors. All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document. Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.

Abstract

   IRC Class Project assignment where the goal is to have written a RFC
   (this one) and to implement an IRC program.

Table of Contents


   1. Introduction...................................................2
   2. Conventions used in this document..............................3
   3. IRC Program....................................................3
      3.1. Getting Started...........................................3
      3.2. Client....................................................3
         3.2.1. Client Messages......................................3
      3.3. Server....................................................4
         3.3.1. Server Messages......................................4
   4. <Section 3 heading as appropriate>.............................4
   5. <Section 4 heading as appropriate>.............................4
   6. Formal Syntax..................................................4
   7. Security Considerations........................................4
   8. IANA Considerations............................................4
   9. Conclusions....................................................4
   10. References....................................................4
      10.1. Normative References.....................................4
      10.2. Informative References...................................5
   11. Acknowledgments...............................................5
   Appendix A. Code>.................................................6
      A.1. TCPServerd.py.............................................6
      A.2. TCPClientd.py.............................................6
      A.3. Legal info for Code.......................................7

1. Introduction

   IRC or Internet Relay Chat is an application that lets multiple users
   communicate via text messages with each other in common "virtual"


Hernandez              Expires January 7, 2018                 [Page 2]

Internet-Draft              <IRC Project>                 December 2017


   rooms. The IRC client and server will be built from scratch using
   python as the choice of implementation. The network protocol used by
   this program is TCP.

   Basic Functionality:
   o  Create a room
   o  Join a room
   o  Leave a room
   o  List the available rooms

2. Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   In this document, these words will appear with that interpretation
   only when in ALL CAPS. Lower case uses of these words are not to be
   interpreted as carrying significance described in RFC 2119.

   In this document, the characters ">>" preceding an indented line(s)
   indicates a statement using the key words listed above. This
   convention aids reviewers in quickly identifying or finding the
   portions of this RFC covered by these keywords.

3. IRC Program

   This section will go over the main program and its various features.
   Note these programs were hardcoded to be running on the same machine.

3.1. Getting Started

   You can either double click the TCPServerd.py if on a linux system or
   open a terminal window and type 'python TCPServerd.py' but you must
   start the TCPServerd.py first before starting the TCPClientd.py on
   the same computer.

3.2. Client

   The client connects to the server (both same machine) using a common
   IRC port 6667 and a localhost which normally maps to 127.0.0.1

3.2.1. Client Messages

   <Text for this section>




Hernandez              Expires January 7, 2018                 [Page 3]

Internet-Draft              <IRC Project>                 December 2017


3.3. Server

   The server listens for clients using a common IRC port 6667.

3.3.1. Server Messages

   <Text for this section>

4. <Section 3 heading as appropriate>

   <Text for this section>

5. <Section 4 heading as appropriate>

   <Text for this section>

6. Formal Syntax

   The following syntax specification uses the augmented Backus-Naur
   Form (BNF) as described in RFC-2234 [RFC2234].

   <Define your formal syntax here.>

7. Security Considerations

   No security was considered at all.

8. IANA Considerations

   None

9. Conclusions

   Program is incomplete

10. References

10.1. Normative References

   [1]   Bradner, S., "Key words for use in RFCs to Indicate Requirement
         Levels", BCP 14, RFC 2119, March 1997.

   [2]   Crocker, D. and Overell, P.(Editors), "Augmented BNF for Syntax
         Specifications: ABNF", RFC 2234, Internet Mail Consortium and
         Demon Internet Ltd., November 1997.




Hernandez              Expires January 7, 2018                 [Page 4]

Internet-Draft              <IRC Project>                 December 2017


   [RFC2119] Bradner, S., "Key words for use in RFCs to Indicate
             Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2234] Crocker, D. and Overell, P.(Editors), "Augmented BNF for
             Syntax Specifications: ABNF", RFC 2234, Internet Mail
             Consortium and Demon Internet Ltd., November 1997.

10.2. Informative References

   [3]   Faber, T., Touch, J. and W. Yue, "The TIME-WAIT state in TCP
         and Its Effect on Busy Servers", Proc. Infocom 1999 pp. 1573-
         1583.

   [Fab1999] Faber, T., Touch, J. and W. Yue, "The TIME-WAIT state in
             TCP and Its Effect on Busy Servers", Proc. Infocom 1999 pp.
             1573-1583.

11. Acknowledgments

   This document was prepared using 2-Word-v2.0.template.dot.





























Hernandez              Expires January 7, 2018                 [Page 5]

Internet-Draft              <IRC Project>                 December 2017


Appendix A.                 Code>

A.1. TCPServerd.py

   #TCPServer.py

   from socket import socket, SOCK_STREAM, AF_INET
   #Create TCP socket use SOCK_STREAM for TCP packets
   serverSocket = socket(AF_INET, SOCK_STREAM)
   serverPort=6667
   # Assign IP address and port number to socket
   serverSocket.bind(('', serverPort))
   serverSocket.listen(1)
   print "Close Server with CTRL-C"
   print "waiting for connection..."
   while True:
      try:
         connectionSocket, addr = serverSocket.accept()
         print "Client connecting from %s port %s" % addr
         # Receive the client packet with address
         while 1:
            message = connectionSocket.recv(2048)
            if not message: break
            # Capitalize the message from the client
            #message = message.upper()
            connectionSocket.send(message)
         connectionSocket.close()
      except KeyboardInterrupt:
         print "\nInterrupted by CTRL-C"
         break
   serverSocket.close()

A.2. TCPClientd.py

   #TCPClient.py

   from socket import socket, AF_INET, SOCK_STREAM
   import sys
   import string

   serverPort=6667
   serverName='localhost'
   cmd = ""
   clientSocket = socket(AF_INET, SOCK_STREAM)
   clientSocket.connect((serverName, serverPort))
   NICK = raw_input('what is your nickname: ')



Hernandez              Expires January 7, 2018                 [Page 6]

Internet-Draft              <IRC Project>                 December 2017


   print "Display commands type '/?' or type a message to send: "

   while(cmd != "/quit"):
      cmd = raw_input()
      if cmd == "/quit":
         print 'Good bye!'
         clientSocket.close()
         exit(0)
      elif cmd == "/?":
         print '/quit /join /leave /create /list'
         cmd = raw_input('enter command or type message to send: ')
      while True:
         #message = raw_input('Message: ')
         message = cmd
         clientSocket.send(message)
         modifiedMessage = clientSocket.recv(2048)
         if modifiedMessage == "/quit":
            print 'Good bye!'
            clientSocket.close()
            exit(0)
         print '<%s>: %s ' % (NICK,modifiedMessage)
         break
   clientSocket.close()

A.3. Legal info for Code

   Copyright (c) 2017 IETF Trust and the persons identified as authors
   of the code. All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, is permitted pursuant to, and subject to the license
   terms contained in, the Simplified BSD License set forth in Section
   4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info).















Hernandez              Expires January 7, 2018                 [Page 7]

Internet-Draft              <IRC Project>                 December 2017


Authors' Addresses

   David Hernandez
   PSU Student
   Portland State University
   Computer Science
   PO Box 751
   Portland OR 97207

   Email: dhern2@pdx.edu







































Hernandez              Expires January 7, 2018                 [Page 8]

